{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tracing = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The Tracing class exposes the tracing audit interface.\n * @remarks\n * You can use `tracing.start` and `tracing.stop` to create a trace file\n * which can be opened in Chrome DevTools or {@link https://chromedevtools.github.io/timeline-viewer/ | timeline viewer}.\n *\n * @example\n * ```js\n * await page.tracing.start({path: 'trace.json'});\n * await page.goto('https://www.google.com');\n * await page.tracing.stop();\n * ```\n *\n * @public\n */\n\n\nclass Tracing {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._recording = false;\n    this._path = '';\n    this._client = client;\n  }\n  /**\n   * Starts a trace for the current page.\n   * @remarks\n   * Only one trace can be active at a time per browser.\n   * @param options - Optional `TracingOptions`.\n   */\n\n\n  async start() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, assert_js_1.assert)(!this._recording, 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler'];\n    const {\n      path = null,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) categories.push('disabled-by-default-devtools.screenshot');\n    const excludedCategories = categories.filter(cat => cat.startsWith('-')).map(cat => cat.slice(1));\n    const includedCategories = categories.filter(cat => !cat.startsWith('-'));\n    this._path = path;\n    this._recording = true;\n    await this._client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      traceConfig: {\n        excludedCategories,\n        includedCategories\n      }\n    });\n  }\n  /**\n   * Stops a trace started with the `start` method.\n   * @returns Promise which resolves to buffer with trace data.\n   */\n\n\n  async stop() {\n    let fulfill;\n    let reject;\n    const contentPromise = new Promise((x, y) => {\n      fulfill = x;\n      reject = y;\n    });\n\n    this._client.once('Tracing.tracingComplete', async event => {\n      try {\n        const readable = await helper_js_1.helper.getReadableFromProtocolStream(this._client, event.stream);\n        const buffer = await helper_js_1.helper.getReadableAsBuffer(readable, this._path);\n        fulfill(buffer);\n      } catch (error) {\n        reject(error);\n      }\n    });\n\n    await this._client.send('Tracing.end');\n    this._recording = false;\n    return contentPromise;\n  }\n\n}\n\nexports.Tracing = Tracing;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAeA;;AACA;AAYA;;;;;;;;;;;;;;;;;AAeA,MAAaA,OAAb,CAAoB;EAKlB;;;EAGAC,YAAYC,MAAZ,EAA8B;IAN9B,kBAAa,KAAb;IACA,aAAQ,EAAR;IAME,KAAKC,OAAL,GAAeD,MAAf;EACD;EAED;;;;;;;;EAMW,MAALE,KAAK,GAA6B;IAAA,IAA5BC,OAA4B,uEAAF,EAAE;IACtC,wBACE,CAAC,KAAKC,UADR,EAEE,6DAFF;IAKA,MAAMC,iBAAiB,GAAG,CACxB,IADwB,EAExB,mBAFwB,EAGxB,YAHwB,EAIxB,uCAJwB,EAKxB,6CALwB,EAMxB,UANwB,EAOxB,eAPwB,EAQxB,mBARwB,EASxB,aATwB,EAUxB,6CAVwB,EAWxB,qCAXwB,CAA1B;IAaA,MAAM;MACJC,IAAI,GAAG,IADH;MAEJC,WAAW,GAAG,KAFV;MAGJC,UAAU,GAAGH;IAHT,IAIFF,OAJJ;IAMA,IAAII,WAAJ,EAAiBC,UAAU,CAACC,IAAX,CAAgB,yCAAhB;IAEjB,MAAMC,kBAAkB,GAAGF,UAAU,CAClCG,MADwB,CAChBC,GAAD,IAASA,GAAG,CAACC,UAAJ,CAAe,GAAf,CADQ,EAExBC,GAFwB,CAEnBF,GAAD,IAASA,GAAG,CAACG,KAAJ,CAAU,CAAV,CAFW,CAA3B;IAGA,MAAMC,kBAAkB,GAAGR,UAAU,CAACG,MAAX,CAAmBC,GAAD,IAAS,CAACA,GAAG,CAACC,UAAJ,CAAe,GAAf,CAA5B,CAA3B;IAEA,KAAKI,KAAL,GAAaX,IAAb;IACA,KAAKF,UAAL,GAAkB,IAAlB;IACA,MAAM,KAAKH,OAAL,CAAaiB,IAAb,CAAkB,eAAlB,EAAmC;MACvCC,YAAY,EAAE,gBADyB;MAEvCC,WAAW,EAAE;QACXV,kBADW;QAEXM;MAFW;IAF0B,CAAnC,CAAN;EAOD;EAED;;;;;;EAIU,MAAJK,IAAI;IACR,IAAIC,OAAJ;IACA,IAAIC,MAAJ;IACA,MAAMC,cAAc,GAAG,IAAIC,OAAJ,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAS;MAClDL,OAAO,GAAGI,CAAV;MACAH,MAAM,GAAGI,CAAT;IACD,CAHsB,CAAvB;;IAIA,KAAK1B,OAAL,CAAa2B,IAAb,CAAkB,yBAAlB,EAA6C,MAAOC,KAAP,IAAgB;MAC3D,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,mBAAOC,6BAAP,CACrB,KAAK/B,OADgB,EAErB4B,KAAK,CAACI,MAFe,CAAvB;QAIA,MAAMC,MAAM,GAAG,MAAMH,mBAAOI,mBAAP,CAA2BL,QAA3B,EAAqC,KAAKb,KAA1C,CAArB;QACAK,OAAO,CAACY,MAAD,CAAP;MACD,CAPD,CAOE,OAAOE,KAAP,EAAc;QACdb,MAAM,CAACa,KAAD,CAAN;MACD;IACF,CAXD;;IAYA,MAAM,KAAKnC,OAAL,CAAaiB,IAAb,CAAkB,aAAlB,CAAN;IACA,KAAKd,UAAL,GAAkB,KAAlB;IACA,OAAOoB,cAAP;EACD;;AAvFiB;;AAApBa","names":["Tracing","constructor","client","_client","start","options","_recording","defaultCategories","path","screenshots","categories","push","excludedCategories","filter","cat","startsWith","map","slice","includedCategories","_path","send","transferMode","traceConfig","stop","fulfill","reject","contentPromise","Promise","x","y","once","event","readable","helper_js_1","getReadableFromProtocolStream","stream","buffer","getReadableAsBuffer","error","exports"],"sources":["../../../../src/common/Tracing.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}