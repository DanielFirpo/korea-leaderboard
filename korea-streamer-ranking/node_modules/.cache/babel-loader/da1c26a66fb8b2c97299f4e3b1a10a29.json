{"ast":null,"code":"var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF]; // returns a function that reads bits.\n// takes a buffer iterator as input\n\nmodule.exports = function bitIterator(nextBuffer) {\n  var bit = 0,\n      byte = 0;\n  var bytes = nextBuffer();\n\n  var f = function (n) {\n    if (n === null && bit != 0) {\n      // align to byte boundary\n      bit = 0;\n      byte++;\n      return;\n    }\n\n    var result = 0;\n\n    while (n > 0) {\n      if (byte >= bytes.length) {\n        byte = 0;\n        bytes = nextBuffer();\n      }\n\n      var left = 8 - bit;\n      if (bit === 0 && n > 0) f.bytesRead++;\n\n      if (n >= left) {\n        result <<= left;\n        result |= BITMASK[left] & bytes[byte++];\n        bit = 0;\n        n -= left;\n      } else {\n        result <<= n;\n        result |= (bytes[byte] & BITMASK[n] << 8 - n - bit) >> 8 - n - bit;\n        bit += n;\n        n = 0;\n      }\n    }\n\n    return result;\n  };\n\n  f.bytesRead = 0;\n  return f;\n};","map":{"version":3,"names":["BITMASK","module","exports","bitIterator","nextBuffer","bit","byte","bytes","f","n","result","length","left","bytesRead"],"sources":["C:/Users/DF/Documents/GitHub/KoreaStreamerRanking/korea-streamer-ranking/node_modules/unbzip2-stream/lib/bit_iterator.js"],"sourcesContent":["var BITMASK = [0, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];\n\n// returns a function that reads bits.\n// takes a buffer iterator as input\nmodule.exports = function bitIterator(nextBuffer) {\n    var bit = 0, byte = 0;\n    var bytes = nextBuffer();\n    var f = function(n) {\n        if (n === null && bit != 0) {  // align to byte boundary\n            bit = 0\n            byte++;\n            return;\n        }\n        var result = 0;\n        while(n > 0) {\n            if (byte >= bytes.length) {\n                byte = 0;\n                bytes = nextBuffer();\n            }\n            var left = 8 - bit;\n            if (bit === 0 && n > 0)\n                f.bytesRead++;\n            if (n >= left) {\n                result <<= left;\n                result |= (BITMASK[left] & bytes[byte++]);\n                bit = 0;\n                n -= left;\n            } else {\n                result <<= n;\n                result |= ((bytes[byte] & (BITMASK[n] << (8 - n - bit))) >> (8 - n - bit));\n                bit += n;\n                n = 0;\n            }\n        }\n        return result;\n    };\n    f.bytesRead = 0;\n    return f;\n};\n"],"mappings":"AAAA,IAAIA,OAAO,GAAG,CAAC,CAAD,EAAI,IAAJ,EAAU,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,IAAxC,EAA8C,IAA9C,CAAd,C,CAEA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,UAArB,EAAiC;EAC9C,IAAIC,GAAG,GAAG,CAAV;EAAA,IAAaC,IAAI,GAAG,CAApB;EACA,IAAIC,KAAK,GAAGH,UAAU,EAAtB;;EACA,IAAII,CAAC,GAAG,UAASC,CAAT,EAAY;IAChB,IAAIA,CAAC,KAAK,IAAN,IAAcJ,GAAG,IAAI,CAAzB,EAA4B;MAAG;MAC3BA,GAAG,GAAG,CAAN;MACAC,IAAI;MACJ;IACH;;IACD,IAAII,MAAM,GAAG,CAAb;;IACA,OAAMD,CAAC,GAAG,CAAV,EAAa;MACT,IAAIH,IAAI,IAAIC,KAAK,CAACI,MAAlB,EAA0B;QACtBL,IAAI,GAAG,CAAP;QACAC,KAAK,GAAGH,UAAU,EAAlB;MACH;;MACD,IAAIQ,IAAI,GAAG,IAAIP,GAAf;MACA,IAAIA,GAAG,KAAK,CAAR,IAAaI,CAAC,GAAG,CAArB,EACID,CAAC,CAACK,SAAF;;MACJ,IAAIJ,CAAC,IAAIG,IAAT,EAAe;QACXF,MAAM,KAAKE,IAAX;QACAF,MAAM,IAAKV,OAAO,CAACY,IAAD,CAAP,GAAgBL,KAAK,CAACD,IAAI,EAAL,CAAhC;QACAD,GAAG,GAAG,CAAN;QACAI,CAAC,IAAIG,IAAL;MACH,CALD,MAKO;QACHF,MAAM,KAAKD,CAAX;QACAC,MAAM,IAAK,CAACH,KAAK,CAACD,IAAD,CAAL,GAAeN,OAAO,CAACS,CAAD,CAAP,IAAe,IAAIA,CAAJ,GAAQJ,GAAvC,KAAkD,IAAII,CAAJ,GAAQJ,GAArE;QACAA,GAAG,IAAII,CAAP;QACAA,CAAC,GAAG,CAAJ;MACH;IACJ;;IACD,OAAOC,MAAP;EACH,CA5BD;;EA6BAF,CAAC,CAACK,SAAF,GAAc,CAAd;EACA,OAAOL,CAAP;AACH,CAlCD"},"metadata":{},"sourceType":"script"}