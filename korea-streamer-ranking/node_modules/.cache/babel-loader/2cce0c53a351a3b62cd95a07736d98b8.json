{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Target = void 0;\n\nconst Page_js_1 = require(\"./Page.js\");\n\nconst WebWorker_js_1 = require(\"./WebWorker.js\");\n/**\n * @public\n */\n\n\nclass Target {\n  /**\n   * @internal\n   */\n  constructor(targetInfo, browserContext, sessionFactory, ignoreHTTPSErrors, defaultViewport, screenshotTaskQueue) {\n    this._targetInfo = targetInfo;\n    this._browserContext = browserContext;\n    this._targetId = targetInfo.targetId;\n    this._sessionFactory = sessionFactory;\n    this._ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this._defaultViewport = defaultViewport;\n    this._screenshotTaskQueue = screenshotTaskQueue;\n    /** @type {?Promise<!Puppeteer.Page>} */\n\n    this._pagePromise = null;\n    /** @type {?Promise<!WebWorker>} */\n\n    this._workerPromise = null;\n    this._initializedPromise = new Promise(fulfill => this._initializedCallback = fulfill).then(async success => {\n      if (!success) return false;\n      const opener = this.opener();\n      if (!opener || !opener._pagePromise || this.type() !== 'page') return true;\n      const openerPage = await opener._pagePromise;\n      if (!openerPage.listenerCount(\"popup\"\n      /* Popup */\n      )) return true;\n      const popupPage = await this.page();\n      openerPage.emit(\"popup\"\n      /* Popup */\n      , popupPage);\n      return true;\n    });\n    this._isClosedPromise = new Promise(fulfill => this._closedCallback = fulfill);\n    this._isInitialized = this._targetInfo.type !== 'page' || this._targetInfo.url !== '';\n    if (this._isInitialized) this._initializedCallback(true);\n  }\n  /**\n   * Creates a Chrome Devtools Protocol session attached to the target.\n   */\n\n\n  createCDPSession() {\n    return this._sessionFactory();\n  }\n  /**\n   * If the target is not of type `\"page\"` or `\"background_page\"`, returns `null`.\n   */\n\n\n  async page() {\n    if ((this._targetInfo.type === 'page' || this._targetInfo.type === 'background_page' || this._targetInfo.type === 'webview') && !this._pagePromise) {\n      this._pagePromise = this._sessionFactory().then(client => Page_js_1.Page.create(client, this, this._ignoreHTTPSErrors, this._defaultViewport, this._screenshotTaskQueue));\n    }\n\n    return this._pagePromise;\n  }\n  /**\n   * If the target is not of type `\"service_worker\"` or `\"shared_worker\"`, returns `null`.\n   */\n\n\n  async worker() {\n    if (this._targetInfo.type !== 'service_worker' && this._targetInfo.type !== 'shared_worker') return null;\n\n    if (!this._workerPromise) {\n      // TODO(einbinder): Make workers send their console logs.\n      this._workerPromise = this._sessionFactory().then(client => new WebWorker_js_1.WebWorker(client, this._targetInfo.url, () => {}\n      /* consoleAPICalled */\n      , () => {}\n      /* exceptionThrown */\n      ));\n    }\n\n    return this._workerPromise;\n  }\n\n  url() {\n    return this._targetInfo.url;\n  }\n  /**\n   * Identifies what kind of target this is.\n   *\n   * @remarks\n   *\n   * See {@link https://developer.chrome.com/extensions/background_pages | docs} for more info about background pages.\n   */\n\n\n  type() {\n    const type = this._targetInfo.type;\n    if (type === 'page' || type === 'background_page' || type === 'service_worker' || type === 'shared_worker' || type === 'browser' || type === 'webview') return type;\n    return 'other';\n  }\n  /**\n   * Get the browser the target belongs to.\n   */\n\n\n  browser() {\n    return this._browserContext.browser();\n  }\n  /**\n   * Get the browser context the target belongs to.\n   */\n\n\n  browserContext() {\n    return this._browserContext;\n  }\n  /**\n   * Get the target that opened this target. Top-level targets return `null`.\n   */\n\n\n  opener() {\n    const {\n      openerId\n    } = this._targetInfo;\n    if (!openerId) return null;\n    return this.browser()._targets.get(openerId);\n  }\n  /**\n   * @internal\n   */\n\n\n  _targetInfoChanged(targetInfo) {\n    this._targetInfo = targetInfo;\n\n    if (!this._isInitialized && (this._targetInfo.type !== 'page' || this._targetInfo.url !== '')) {\n      this._isInitialized = true;\n\n      this._initializedCallback(true);\n\n      return;\n    }\n  }\n\n}\n\nexports.Target = Target;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;;AACA;AAOA;;;;;AAGA,MAAaA,MAAb,CAAmB;EAmCjB;;;EAGAC,YACEC,UADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,iBAJF,EAKEC,eALF,EAMEC,mBANF,EAMgC;IAE9B,KAAKC,WAAL,GAAmBN,UAAnB;IACA,KAAKO,eAAL,GAAuBN,cAAvB;IACA,KAAKO,SAAL,GAAiBR,UAAU,CAACS,QAA5B;IACA,KAAKC,eAAL,GAAuBR,cAAvB;IACA,KAAKS,kBAAL,GAA0BR,iBAA1B;IACA,KAAKS,gBAAL,GAAwBR,eAAxB;IACA,KAAKS,oBAAL,GAA4BR,mBAA5B;IACA;;IACA,KAAKS,YAAL,GAAoB,IAApB;IACA;;IACA,KAAKC,cAAL,GAAsB,IAAtB;IACA,KAAKC,mBAAL,GAA2B,IAAIC,OAAJ,CACxBC,OAAD,IAAc,KAAKC,oBAAL,GAA4BD,OADjB,EAEzBE,IAFyB,CAEpB,MAAOC,OAAP,IAAkB;MACvB,IAAI,CAACA,OAAL,EAAc,OAAO,KAAP;MACd,MAAMC,MAAM,GAAG,KAAKA,MAAL,EAAf;MACA,IAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACR,YAAnB,IAAmC,KAAKS,IAAL,OAAgB,MAAvD,EACE,OAAO,IAAP;MACF,MAAMC,UAAU,GAAG,MAAMF,MAAM,CAACR,YAAhC;MACA,IAAI,CAACU,UAAU,CAACC,aAAX,CAAwB;MAAA;MAAxB,CAAL,EAAwD,OAAO,IAAP;MACxD,MAAMC,SAAS,GAAG,MAAM,KAAKC,IAAL,EAAxB;MACAH,UAAU,CAACI,IAAX,CAAe;MAAA;MAAf,EAAyCF,SAAzC;MACA,OAAO,IAAP;IACD,CAZ0B,CAA3B;IAaA,KAAKG,gBAAL,GAAwB,IAAIZ,OAAJ,CACrBC,OAAD,IAAc,KAAKY,eAAL,GAAuBZ,OADf,CAAxB;IAGA,KAAKa,cAAL,GACE,KAAKzB,WAAL,CAAiBiB,IAAjB,KAA0B,MAA1B,IAAoC,KAAKjB,WAAL,CAAiB0B,GAAjB,KAAyB,EAD/D;IAEA,IAAI,KAAKD,cAAT,EAAyB,KAAKZ,oBAAL,CAA0B,IAA1B;EAC1B;EAED;;;;;EAGAc,gBAAgB;IACd,OAAO,KAAKvB,eAAL,EAAP;EACD;EAED;;;;;EAGU,MAAJiB,IAAI;IACR,IACE,CAAC,KAAKrB,WAAL,CAAiBiB,IAAjB,KAA0B,MAA1B,IACC,KAAKjB,WAAL,CAAiBiB,IAAjB,KAA0B,iBAD3B,IAEC,KAAKjB,WAAL,CAAiBiB,IAAjB,KAA0B,SAF5B,KAGA,CAAC,KAAKT,YAJR,EAKE;MACA,KAAKA,YAAL,GAAoB,KAAKJ,eAAL,GAAuBU,IAAvB,CAA6Bc,MAAD,IAC9CC,eAAKC,MAAL,CACEF,MADF,EAEE,IAFF,EAGE,KAAKvB,kBAHP,EAIE,KAAKC,gBAJP,EAKE,KAAKC,oBALP,CADkB,CAApB;IASD;;IACD,OAAO,KAAKC,YAAZ;EACD;EAED;;;;;EAGY,MAANuB,MAAM;IACV,IACE,KAAK/B,WAAL,CAAiBiB,IAAjB,KAA0B,gBAA1B,IACA,KAAKjB,WAAL,CAAiBiB,IAAjB,KAA0B,eAF5B,EAIE,OAAO,IAAP;;IACF,IAAI,CAAC,KAAKR,cAAV,EAA0B;MACxB;MACA,KAAKA,cAAL,GAAsB,KAAKL,eAAL,GAAuBU,IAAvB,CACnBc,MAAD,IACE,IAAII,wBAAJ,CACEJ,MADF,EAEE,KAAK5B,WAAL,CAAiB0B,GAFnB,EAGE,MAAK,CAAG;MAAC;MAHX,EAIE,MAAK,CAAG;MAAC;MAJX,CAFkB,CAAtB;IASD;;IACD,OAAO,KAAKjB,cAAZ;EACD;;EAEDiB,GAAG;IACD,OAAO,KAAK1B,WAAL,CAAiB0B,GAAxB;EACD;EAED;;;;;;;;;EAOAT,IAAI;IAQF,MAAMA,IAAI,GAAG,KAAKjB,WAAL,CAAiBiB,IAA9B;IACA,IACEA,IAAI,KAAK,MAAT,IACAA,IAAI,KAAK,iBADT,IAEAA,IAAI,KAAK,gBAFT,IAGAA,IAAI,KAAK,eAHT,IAIAA,IAAI,KAAK,SAJT,IAKAA,IAAI,KAAK,SANX,EAQE,OAAOA,IAAP;IACF,OAAO,OAAP;EACD;EAED;;;;;EAGAgB,OAAO;IACL,OAAO,KAAKhC,eAAL,CAAqBgC,OAArB,EAAP;EACD;EAED;;;;;EAGAtC,cAAc;IACZ,OAAO,KAAKM,eAAZ;EACD;EAED;;;;;EAGAe,MAAM;IACJ,MAAM;MAAEkB;IAAF,IAAe,KAAKlC,WAA1B;IACA,IAAI,CAACkC,QAAL,EAAe,OAAO,IAAP;IACf,OAAO,KAAKD,OAAL,GAAeE,QAAf,CAAwBC,GAAxB,CAA4BF,QAA5B,CAAP;EACD;EAED;;;;;EAGAG,kBAAkB,CAAC3C,UAAD,EAAuC;IACvD,KAAKM,WAAL,GAAmBN,UAAnB;;IAEA,IACE,CAAC,KAAK+B,cAAN,KACC,KAAKzB,WAAL,CAAiBiB,IAAjB,KAA0B,MAA1B,IAAoC,KAAKjB,WAAL,CAAiB0B,GAAjB,KAAyB,EAD9D,CADF,EAGE;MACA,KAAKD,cAAL,GAAsB,IAAtB;;MACA,KAAKZ,oBAAL,CAA0B,IAA1B;;MACA;IACD;EACF;;AAzMgB;;AAAnByB","names":["Target","constructor","targetInfo","browserContext","sessionFactory","ignoreHTTPSErrors","defaultViewport","screenshotTaskQueue","_targetInfo","_browserContext","_targetId","targetId","_sessionFactory","_ignoreHTTPSErrors","_defaultViewport","_screenshotTaskQueue","_pagePromise","_workerPromise","_initializedPromise","Promise","fulfill","_initializedCallback","then","success","opener","type","openerPage","listenerCount","popupPage","page","emit","_isClosedPromise","_closedCallback","_isInitialized","url","createCDPSession","client","Page_js_1","create","worker","WebWorker_js_1","browser","openerId","_targets","get","_targetInfoChanged","exports"],"sources":["../../../../src/common/Target.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}