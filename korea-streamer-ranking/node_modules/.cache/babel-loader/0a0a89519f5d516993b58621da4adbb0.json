{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CDPSession = exports.CDPSessionEmittedEvents = exports.Connection = exports.ConnectionEmittedEvents = void 0;\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst Debug_js_1 = require(\"./Debug.js\");\n\nconst debugProtocolSend = (0, Debug_js_1.debug)('puppeteer:protocol:SEND ►');\nconst debugProtocolReceive = (0, Debug_js_1.debug)('puppeteer:protocol:RECV ◀');\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n\nconst Errors_js_1 = require(\"./Errors.js\");\n/**\n * Internal events that the Connection class emits.\n *\n * @internal\n */\n\n\nexports.ConnectionEmittedEvents = {\n  Disconnected: Symbol('Connection.Disconnected')\n};\n/**\n * @public\n */\n\nclass Connection extends EventEmitter_js_1.EventEmitter {\n  constructor(url, transport) {\n    let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    super();\n    this._lastId = 0;\n    this._sessions = new Map();\n    this._closed = false;\n    this._callbacks = new Map();\n    this._url = url;\n    this._delay = delay;\n    this._transport = transport;\n    this._transport.onmessage = this._onMessage.bind(this);\n    this._transport.onclose = this._onClose.bind(this);\n  }\n\n  static fromSession(session) {\n    return session._connection;\n  }\n  /**\n   * @param sessionId - The session id\n   * @returns The current CDP session if it exists\n   */\n\n\n  session(sessionId) {\n    return this._sessions.get(sessionId) || null;\n  }\n\n  url() {\n    return this._url;\n  }\n\n  send(method) {\n    // There is only ever 1 param arg passed, but the Protocol defines it as an\n    // array of 0 or 1 items See this comment:\n    // https://github.com/ChromeDevTools/devtools-protocol/pull/113#issuecomment-412603285\n    // which explains why the protocol defines the params this way for better\n    // type-inference.\n    // So now we check if there are any params or not and deal with them accordingly.\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n\n    const id = this._rawSend({\n      method,\n      params\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Errors_js_1.ProtocolError(),\n        method\n      });\n    });\n  }\n\n  _rawSend(message) {\n    const id = ++this._lastId;\n    const stringifiedMessage = JSON.stringify(Object.assign({}, message, {\n      id\n    }));\n    debugProtocolSend(stringifiedMessage);\n\n    this._transport.send(stringifiedMessage);\n\n    return id;\n  }\n\n  async _onMessage(message) {\n    if (this._delay) await new Promise(f => setTimeout(f, this._delay));\n    debugProtocolReceive(message);\n    const object = JSON.parse(message);\n\n    if (object.method === 'Target.attachedToTarget') {\n      const sessionId = object.params.sessionId;\n      const session = new CDPSession(this, object.params.targetInfo.type, sessionId);\n\n      this._sessions.set(sessionId, session);\n\n      this.emit('sessionattached', session);\n\n      const parentSession = this._sessions.get(object.sessionId);\n\n      if (parentSession) {\n        parentSession.emit('sessionattached', session);\n      }\n    } else if (object.method === 'Target.detachedFromTarget') {\n      const session = this._sessions.get(object.params.sessionId);\n\n      if (session) {\n        session._onClosed();\n\n        this._sessions.delete(object.params.sessionId);\n\n        this.emit('sessiondetached', session);\n\n        const parentSession = this._sessions.get(object.sessionId);\n\n        if (parentSession) {\n          parentSession.emit('sessiondetached', session);\n        }\n      }\n    }\n\n    if (object.sessionId) {\n      const session = this._sessions.get(object.sessionId);\n\n      if (session) session._onMessage(object);\n    } else if (object.id) {\n      const callback = this._callbacks.get(object.id); // Callbacks could be all rejected if someone has called `.dispose()`.\n\n\n      if (callback) {\n        this._callbacks.delete(object.id);\n\n        if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n      }\n    } else {\n      this.emit(object.method, object.params);\n    }\n  }\n\n  _onClose() {\n    if (this._closed) return;\n    this._closed = true;\n    this._transport.onmessage = undefined;\n    this._transport.onclose = undefined;\n\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    for (const session of this._sessions.values()) session._onClosed();\n\n    this._sessions.clear();\n\n    this.emit(exports.ConnectionEmittedEvents.Disconnected);\n  }\n\n  dispose() {\n    this._onClose();\n\n    this._transport.close();\n  }\n  /**\n   * @param targetInfo - The target info\n   * @returns The CDP session that is created\n   */\n\n\n  async createSession(targetInfo) {\n    const {\n      sessionId\n    } = await this.send('Target.attachToTarget', {\n      targetId: targetInfo.targetId,\n      flatten: true\n    });\n\n    const session = this._sessions.get(sessionId);\n\n    if (!session) {\n      throw new Error('CDPSession creation failed.');\n    }\n\n    return session;\n  }\n\n}\n\nexports.Connection = Connection;\n/**\n * Internal events that the CDPSession class emits.\n *\n * @internal\n */\n\nexports.CDPSessionEmittedEvents = {\n  Disconnected: Symbol('CDPSession.Disconnected')\n};\n/**\n * The `CDPSession` instances are used to talk raw Chrome Devtools Protocol.\n *\n * @remarks\n *\n * Protocol methods can be called with {@link CDPSession.send} method and protocol\n * events can be subscribed to with `CDPSession.on` method.\n *\n * Useful links: {@link https://chromedevtools.github.io/devtools-protocol/ | DevTools Protocol Viewer}\n * and {@link https://github.com/aslushnikov/getting-started-with-cdp/blob/HEAD/README.md | Getting Started with DevTools Protocol}.\n *\n * @example\n * ```js\n * const client = await page.target().createCDPSession();\n * await client.send('Animation.enable');\n * client.on('Animation.animationCreated', () => console.log('Animation created!'));\n * const response = await client.send('Animation.getPlaybackRate');\n * console.log('playback rate is ' + response.playbackRate);\n * await client.send('Animation.setPlaybackRate', {\n *   playbackRate: response.playbackRate / 2\n * });\n * ```\n *\n * @public\n */\n\nclass CDPSession extends EventEmitter_js_1.EventEmitter {\n  /**\n   * @internal\n   */\n  constructor(connection, targetType, sessionId) {\n    super();\n    this._callbacks = new Map();\n    this._connection = connection;\n    this._targetType = targetType;\n    this._sessionId = sessionId;\n  }\n\n  connection() {\n    return this._connection;\n  }\n\n  send(method) {\n    if (!this._connection) return Promise.reject(new Error(`Protocol error (${method}): Session closed. Most likely the ${this._targetType} has been closed.`)); // See the comment in Connection#send explaining why we do this.\n\n    const params = (arguments.length <= 1 ? 0 : arguments.length - 1) ? arguments.length <= 1 ? undefined : arguments[1] : undefined;\n\n    const id = this._connection._rawSend({\n      sessionId: this._sessionId,\n      method,\n      params\n    });\n\n    return new Promise((resolve, reject) => {\n      this._callbacks.set(id, {\n        resolve,\n        reject,\n        error: new Errors_js_1.ProtocolError(),\n        method\n      });\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _onMessage(object) {\n    const callback = object.id ? this._callbacks.get(object.id) : undefined;\n\n    if (object.id && callback) {\n      this._callbacks.delete(object.id);\n\n      if (object.error) callback.reject(createProtocolError(callback.error, callback.method, object));else callback.resolve(object.result);\n    } else {\n      (0, assert_js_1.assert)(!object.id);\n      this.emit(object.method, object.params);\n    }\n  }\n  /**\n   * Detaches the cdpSession from the target. Once detached, the cdpSession object\n   * won't emit any events and can't be used to send messages.\n   */\n\n\n  async detach() {\n    if (!this._connection) throw new Error(`Session already detached. Most likely the ${this._targetType} has been closed.`);\n    await this._connection.send('Target.detachFromTarget', {\n      sessionId: this._sessionId\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _onClosed() {\n    for (const callback of this._callbacks.values()) callback.reject(rewriteError(callback.error, `Protocol error (${callback.method}): Target closed.`));\n\n    this._callbacks.clear();\n\n    this._connection = undefined;\n    this.emit(exports.CDPSessionEmittedEvents.Disconnected);\n  }\n  /**\n   * @internal\n   */\n\n\n  id() {\n    return this._sessionId;\n  }\n\n}\n\nexports.CDPSession = CDPSession;\n/**\n * @param {!Error} error\n * @param {string} method\n * @param {{error: {message: string, data: any}}} object\n * @returns {!Error}\n */\n\nfunction createProtocolError(error, method, object) {\n  let message = `Protocol error (${method}): ${object.error.message}`;\n  if ('data' in object.error) message += ` ${object.error.data}`;\n  return rewriteError(error, message, object.error.message);\n}\n/**\n * @param {!Error} error\n * @param {string} message\n * @returns {!Error}\n */\n\n\nfunction rewriteError(error, message, originalMessage) {\n  error.message = message;\n  error.originalMessage = originalMessage !== null && originalMessage !== void 0 ? originalMessage : error.originalMessage;\n  return error;\n}","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAeA;;AACA;;AACA,MAAMA,iBAAiB,GAAG,sBAAM,2BAAN,CAA1B;AACA,MAAMC,oBAAoB,GAAG,sBAAM,2BAAN,CAA7B;;AAKA;;AACA;AAiBA;;;;;;;AAKaC,kCAA0B;EACrCC,YAAY,EAAEC,MAAM,CAAC,yBAAD;AADiB,CAA1B;AAIb;;;;AAGA,MAAaC,UAAb,SAAgCC,8BAAhC,CAA4C;EAU1CC,YAAYC,GAAZ,EAAyBC,SAAzB,EAAkE;IAAA,IAATC,KAAS,uEAAD,CAAC;IAChE;IAPF,eAAU,CAAV;IACA,iBAAqC,IAAIC,GAAJ,EAArC;IACA,eAAU,KAAV;IAEA,kBAA8C,IAAIA,GAAJ,EAA9C;IAIE,KAAKC,IAAL,GAAYJ,GAAZ;IACA,KAAKK,MAAL,GAAcH,KAAd;IAEA,KAAKI,UAAL,GAAkBL,SAAlB;IACA,KAAKK,UAAL,CAAgBC,SAAhB,GAA4B,KAAKC,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAA5B;IACA,KAAKH,UAAL,CAAgBI,OAAhB,GAA0B,KAAKC,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAA1B;EACD;;EAEiB,OAAXG,WAAW,CAACC,OAAD,EAAoB;IACpC,OAAOA,OAAO,CAACC,WAAf;EACD;EAED;;;;;;EAIAD,OAAO,CAACE,SAAD,EAAkB;IACvB,OAAO,KAAKC,SAAL,CAAeC,GAAf,CAAmBF,SAAnB,KAAiC,IAAxC;EACD;;EAEDf,GAAG;IACD,OAAO,KAAKI,IAAZ;EACD;;EAEDc,IAAI,CACFC,MADE,EAEqD;IAEvD;IACA;IACA;IACA;IACA;IACA;IACA,MAAMC,MAAM,GAAG,wGAAkCC,SAAjD;;IACA,MAAMC,EAAE,GAAG,KAAKC,QAAL,CAAc;MAAEJ,MAAF;MAAUC;IAAV,CAAd,CAAX;;IACA,OAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC,KAAKC,UAAL,CAAgBC,GAAhB,CAAoBN,EAApB,EAAwB;QACtBG,OADsB;QAEtBC,MAFsB;QAGtBG,KAAK,EAAE,IAAIC,yBAAJ,EAHe;QAItBX;MAJsB,CAAxB;IAMD,CAPM,CAAP;EAQD;;EAEDI,QAAQ,CAACQ,OAAD,EAAiC;IACvC,MAAMT,EAAE,GAAG,EAAE,KAAKU,OAAlB;IACA,MAAMC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CACzBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,EAA2B;MAAET;IAAF,CAA3B,CADyB,CAA3B;IAGA9B,iBAAiB,CAACyC,kBAAD,CAAjB;;IACA,KAAK3B,UAAL,CAAgBY,IAAhB,CAAqBe,kBAArB;;IACA,OAAOX,EAAP;EACD;;EAEe,MAAVd,UAAU,CAACuB,OAAD,EAAgB;IAC9B,IAAI,KAAK1B,MAAT,EAAiB,MAAM,IAAImB,OAAJ,CAAac,CAAD,IAAOC,UAAU,CAACD,CAAD,EAAI,KAAKjC,MAAT,CAA7B,CAAN;IACjBZ,oBAAoB,CAACsC,OAAD,CAApB;IACA,MAAMS,MAAM,GAAGN,IAAI,CAACO,KAAL,CAAWV,OAAX,CAAf;;IACA,IAAIS,MAAM,CAACrB,MAAP,KAAkB,yBAAtB,EAAiD;MAC/C,MAAMJ,SAAS,GAAGyB,MAAM,CAACpB,MAAP,CAAcL,SAAhC;MACA,MAAMF,OAAO,GAAG,IAAI6B,UAAJ,CACd,IADc,EAEdF,MAAM,CAACpB,MAAP,CAAcuB,UAAd,CAAyBC,IAFX,EAGd7B,SAHc,CAAhB;;MAKA,KAAKC,SAAL,CAAeY,GAAf,CAAmBb,SAAnB,EAA8BF,OAA9B;;MACA,KAAKgC,IAAL,CAAU,iBAAV,EAA6BhC,OAA7B;;MACA,MAAMiC,aAAa,GAAG,KAAK9B,SAAL,CAAeC,GAAf,CAAmBuB,MAAM,CAACzB,SAA1B,CAAtB;;MACA,IAAI+B,aAAJ,EAAmB;QACjBA,aAAa,CAACD,IAAd,CAAmB,iBAAnB,EAAsChC,OAAtC;MACD;IACF,CAbD,MAaO,IAAI2B,MAAM,CAACrB,MAAP,KAAkB,2BAAtB,EAAmD;MACxD,MAAMN,OAAO,GAAG,KAAKG,SAAL,CAAeC,GAAf,CAAmBuB,MAAM,CAACpB,MAAP,CAAcL,SAAjC,CAAhB;;MACA,IAAIF,OAAJ,EAAa;QACXA,OAAO,CAACkC,SAAR;;QACA,KAAK/B,SAAL,CAAegC,MAAf,CAAsBR,MAAM,CAACpB,MAAP,CAAcL,SAApC;;QACA,KAAK8B,IAAL,CAAU,iBAAV,EAA6BhC,OAA7B;;QACA,MAAMiC,aAAa,GAAG,KAAK9B,SAAL,CAAeC,GAAf,CAAmBuB,MAAM,CAACzB,SAA1B,CAAtB;;QACA,IAAI+B,aAAJ,EAAmB;UACjBA,aAAa,CAACD,IAAd,CAAmB,iBAAnB,EAAsChC,OAAtC;QACD;MACF;IACF;;IACD,IAAI2B,MAAM,CAACzB,SAAX,EAAsB;MACpB,MAAMF,OAAO,GAAG,KAAKG,SAAL,CAAeC,GAAf,CAAmBuB,MAAM,CAACzB,SAA1B,CAAhB;;MACA,IAAIF,OAAJ,EAAaA,OAAO,CAACL,UAAR,CAAmBgC,MAAnB;IACd,CAHD,MAGO,IAAIA,MAAM,CAAClB,EAAX,EAAe;MACpB,MAAM2B,QAAQ,GAAG,KAAKtB,UAAL,CAAgBV,GAAhB,CAAoBuB,MAAM,CAAClB,EAA3B,CAAjB,CADoB,CAEpB;;;MACA,IAAI2B,QAAJ,EAAc;QACZ,KAAKtB,UAAL,CAAgBqB,MAAhB,CAAuBR,MAAM,CAAClB,EAA9B;;QACA,IAAIkB,MAAM,CAACX,KAAX,EACEoB,QAAQ,CAACvB,MAAT,CACEwB,mBAAmB,CAACD,QAAQ,CAACpB,KAAV,EAAiBoB,QAAQ,CAAC9B,MAA1B,EAAkCqB,MAAlC,CADrB,EADF,KAIKS,QAAQ,CAACxB,OAAT,CAAiBe,MAAM,CAACW,MAAxB;MACN;IACF,CAXM,MAWA;MACL,KAAKN,IAAL,CAAUL,MAAM,CAACrB,MAAjB,EAAyBqB,MAAM,CAACpB,MAAhC;IACD;EACF;;EAEDT,QAAQ;IACN,IAAI,KAAKyC,OAAT,EAAkB;IAClB,KAAKA,OAAL,GAAe,IAAf;IACA,KAAK9C,UAAL,CAAgBC,SAAhB,GAA4Bc,SAA5B;IACA,KAAKf,UAAL,CAAgBI,OAAhB,GAA0BW,SAA1B;;IACA,KAAK,MAAM4B,QAAX,IAAuB,KAAKtB,UAAL,CAAgB0B,MAAhB,EAAvB,EACEJ,QAAQ,CAACvB,MAAT,CACE4B,YAAY,CACVL,QAAQ,CAACpB,KADC,EAEV,mBAAmBoB,QAAQ,CAAC9B,MAAM,mBAFxB,CADd;;IAMF,KAAKQ,UAAL,CAAgB4B,KAAhB;;IACA,KAAK,MAAM1C,OAAX,IAAsB,KAAKG,SAAL,CAAeqC,MAAf,EAAtB,EAA+CxC,OAAO,CAACkC,SAAR;;IAC/C,KAAK/B,SAAL,CAAeuC,KAAf;;IACA,KAAKV,IAAL,CAAUnD,gCAAwBC,YAAlC;EACD;;EAED6D,OAAO;IACL,KAAK7C,QAAL;;IACA,KAAKL,UAAL,CAAgBmD,KAAhB;EACD;EAED;;;;;;EAImB,MAAbC,aAAa,CACjBf,UADiB,EACqB;IAEtC,MAAM;MAAE5B;IAAF,IAAgB,MAAM,KAAKG,IAAL,CAAU,uBAAV,EAAmC;MAC7DyC,QAAQ,EAAEhB,UAAU,CAACgB,QADwC;MAE7DC,OAAO,EAAE;IAFoD,CAAnC,CAA5B;;IAIA,MAAM/C,OAAO,GAAG,KAAKG,SAAL,CAAeC,GAAf,CAAmBF,SAAnB,CAAhB;;IACA,IAAI,CAACF,OAAL,EAAc;MACZ,MAAM,IAAIgD,KAAJ,CAAU,6BAAV,CAAN;IACD;;IACD,OAAOhD,OAAP;EACD;;AA3JyC;;AAA5CnB;AAyKA;;;;;;AAKaA,kCAA0B;EACrCC,YAAY,EAAEC,MAAM,CAAC,yBAAD;AADiB,CAA1B;AAIb;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAa8C,UAAb,SAAgC5C,8BAAhC,CAA4C;EAS1C;;;EAGAC,YAAY+D,UAAZ,EAAoCC,UAApC,EAAwDhD,SAAxD,EAAyE;IACvE;IANM,kBAA8C,IAAIZ,GAAJ,EAA9C;IAON,KAAKW,WAAL,GAAmBgD,UAAnB;IACA,KAAKE,WAAL,GAAmBD,UAAnB;IACA,KAAKE,UAAL,GAAkBlD,SAAlB;EACD;;EAED+C,UAAU;IACR,OAAO,KAAKhD,WAAZ;EACD;;EAEDI,IAAI,CACFC,MADE,EAEqD;IAEvD,IAAI,CAAC,KAAKL,WAAV,EACE,OAAOU,OAAO,CAACE,MAAR,CACL,IAAImC,KAAJ,CACE,mBAAmB1C,MAAM,sCAAsC,KAAK6C,WAAW,mBADjF,CADK,CAAP,CAHqD,CASvD;;IACA,MAAM5C,MAAM,GAAG,wGAAkCC,SAAjD;;IAEA,MAAMC,EAAE,GAAG,KAAKR,WAAL,CAAiBS,QAAjB,CAA0B;MACnCR,SAAS,EAAE,KAAKkD,UADmB;MAEnC9C,MAFmC;MAGnCC;IAHmC,CAA1B,CAAX;;IAMA,OAAO,IAAII,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC,KAAKC,UAAL,CAAgBC,GAAhB,CAAoBN,EAApB,EAAwB;QACtBG,OADsB;QAEtBC,MAFsB;QAGtBG,KAAK,EAAE,IAAIC,yBAAJ,EAHe;QAItBX;MAJsB,CAAxB;IAMD,CAPM,CAAP;EAQD;EAED;;;;;EAGAX,UAAU,CAACgC,MAAD,EAAkC;IAC1C,MAAMS,QAAQ,GAAGT,MAAM,CAAClB,EAAP,GAAY,KAAKK,UAAL,CAAgBV,GAAhB,CAAoBuB,MAAM,CAAClB,EAA3B,CAAZ,GAA6CD,SAA9D;;IACA,IAAImB,MAAM,CAAClB,EAAP,IAAa2B,QAAjB,EAA2B;MACzB,KAAKtB,UAAL,CAAgBqB,MAAhB,CAAuBR,MAAM,CAAClB,EAA9B;;MACA,IAAIkB,MAAM,CAACX,KAAX,EACEoB,QAAQ,CAACvB,MAAT,CACEwB,mBAAmB,CAACD,QAAQ,CAACpB,KAAV,EAAiBoB,QAAQ,CAAC9B,MAA1B,EAAkCqB,MAAlC,CADrB,EADF,KAIKS,QAAQ,CAACxB,OAAT,CAAiBe,MAAM,CAACW,MAAxB;IACN,CAPD,MAOO;MACL,wBAAO,CAACX,MAAM,CAAClB,EAAf;MACA,KAAKuB,IAAL,CAAUL,MAAM,CAACrB,MAAjB,EAAyBqB,MAAM,CAACpB,MAAhC;IACD;EACF;EAED;;;;;;EAIY,MAAN8C,MAAM;IACV,IAAI,CAAC,KAAKpD,WAAV,EACE,MAAM,IAAI+C,KAAJ,CACJ,6CAA6C,KAAKG,WAAW,mBADzD,CAAN;IAGF,MAAM,KAAKlD,WAAL,CAAiBI,IAAjB,CAAsB,yBAAtB,EAAiD;MACrDH,SAAS,EAAE,KAAKkD;IADqC,CAAjD,CAAN;EAGD;EAED;;;;;EAGAlB,SAAS;IACP,KAAK,MAAME,QAAX,IAAuB,KAAKtB,UAAL,CAAgB0B,MAAhB,EAAvB,EACEJ,QAAQ,CAACvB,MAAT,CACE4B,YAAY,CACVL,QAAQ,CAACpB,KADC,EAEV,mBAAmBoB,QAAQ,CAAC9B,MAAM,mBAFxB,CADd;;IAMF,KAAKQ,UAAL,CAAgB4B,KAAhB;;IACA,KAAKzC,WAAL,GAAmBO,SAAnB;IACA,KAAKwB,IAAL,CAAUnD,gCAAwBC,YAAlC;EACD;EAED;;;;;EAGA2B,EAAE;IACA,OAAO,KAAK2C,UAAZ;EACD;;AA1GyC;;AAA5CvE;AA6GA;;;;;;;AAMA,SAASwD,mBAAT,CACErB,KADF,EAEEV,MAFF,EAGEqB,MAHF,EAGiE;EAE/D,IAAIT,OAAO,GAAG,mBAAmBZ,MAAM,MAAMqB,MAAM,CAACX,KAAP,CAAaE,OAAO,EAAjE;EACA,IAAI,UAAUS,MAAM,CAACX,KAArB,EAA4BE,OAAO,IAAI,IAAIS,MAAM,CAACX,KAAP,CAAasC,IAAI,EAAhC;EAC5B,OAAOb,YAAY,CAACzB,KAAD,EAAQE,OAAR,EAAiBS,MAAM,CAACX,KAAP,CAAaE,OAA9B,CAAnB;AACD;AAED;;;;;;;AAKA,SAASuB,YAAT,CACEzB,KADF,EAEEE,OAFF,EAGEqC,eAHF,EAG0B;EAExBvC,KAAK,CAACE,OAAN,GAAgBA,OAAhB;EACAF,KAAK,CAACuC,eAAN,GAAwBA,eAAe,SAAf,mBAAe,WAAf,qBAAmBvC,KAAK,CAACuC,eAAjD;EACA,OAAOvC,KAAP;AACD","names":["debugProtocolSend","debugProtocolReceive","exports","Disconnected","Symbol","Connection","EventEmitter_js_1","constructor","url","transport","delay","Map","_url","_delay","_transport","onmessage","_onMessage","bind","onclose","_onClose","fromSession","session","_connection","sessionId","_sessions","get","send","method","params","undefined","id","_rawSend","Promise","resolve","reject","_callbacks","set","error","Errors_js_1","message","_lastId","stringifiedMessage","JSON","stringify","Object","assign","f","setTimeout","object","parse","CDPSession","targetInfo","type","emit","parentSession","_onClosed","delete","callback","createProtocolError","result","_closed","values","rewriteError","clear","dispose","close","createSession","targetId","flatten","Error","connection","targetType","_targetType","_sessionId","detach","data","originalMessage"],"sources":["../../../../src/common/Connection.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}