{"ast":null,"code":"var through = require('through');\n\nvar bz2 = require('./lib/bzip2');\n\nvar bitIterator = require('./lib/bit_iterator');\n\nmodule.exports = unbzip2Stream;\n\nfunction unbzip2Stream() {\n  var bufferQueue = [];\n  var hasBytes = 0;\n  var blockSize = 0;\n  var broken = false;\n  var done = false;\n  var bitReader = null;\n  var streamCRC = null;\n\n  function decompressBlock(push) {\n    if (!blockSize) {\n      blockSize = bz2.header(bitReader); //console.error(\"got header of\", blockSize);\n\n      streamCRC = 0;\n      return true;\n    } else {\n      var bufsize = 100000 * blockSize;\n      var buf = new Int32Array(bufsize);\n      var chunk = [];\n\n      var f = function (b) {\n        chunk.push(b);\n      };\n\n      streamCRC = bz2.decompress(bitReader, f, buf, bufsize, streamCRC);\n\n      if (streamCRC === null) {\n        // reset for next bzip2 header\n        blockSize = 0;\n        return false;\n      } else {\n        //console.error('decompressed', chunk.length,'bytes');\n        push(Buffer.from(chunk));\n        return true;\n      }\n    }\n  }\n\n  var outlength = 0;\n\n  function decompressAndQueue(stream) {\n    if (broken) return;\n\n    try {\n      return decompressBlock(function (d) {\n        stream.queue(d);\n\n        if (d !== null) {\n          //console.error('write at', outlength.toString(16));\n          outlength += d.length;\n        } else {//console.error('written EOS');\n        }\n      });\n    } catch (e) {\n      //console.error(e);\n      stream.emit('error', e);\n      broken = true;\n      return false;\n    }\n  }\n\n  return through(function write(data) {\n    //console.error('received', data.length,'bytes in', typeof data);\n    bufferQueue.push(data);\n    hasBytes += data.length;\n\n    if (bitReader === null) {\n      bitReader = bitIterator(function () {\n        return bufferQueue.shift();\n      });\n    }\n\n    while (!broken && hasBytes - bitReader.bytesRead + 1 >= (25000 + 100000 * blockSize || 4)) {\n      //console.error('decompressing with', hasBytes - bitReader.bytesRead + 1, 'bytes in buffer');\n      decompressAndQueue(this);\n    }\n  }, function end(x) {\n    //console.error(x,'last compressing with', hasBytes, 'bytes in buffer');\n    while (!broken && bitReader && hasBytes > bitReader.bytesRead) {\n      decompressAndQueue(this);\n    }\n\n    if (!broken) {\n      if (streamCRC !== null) this.emit('error', new Error(\"input stream ended prematurely\"));\n      this.queue(null);\n    }\n  });\n}","map":{"version":3,"names":["through","require","bz2","bitIterator","module","exports","unbzip2Stream","bufferQueue","hasBytes","blockSize","broken","done","bitReader","streamCRC","decompressBlock","push","header","bufsize","buf","Int32Array","chunk","f","b","decompress","Buffer","from","outlength","decompressAndQueue","stream","d","queue","length","e","emit","write","data","shift","bytesRead","end","x","Error"],"sources":["C:/Users/DF/Documents/GitHub/KoreaStreamerRanking/korea-streamer-ranking/node_modules/unbzip2-stream/index.js"],"sourcesContent":["var through = require('through');\nvar bz2 = require('./lib/bzip2');\nvar bitIterator = require('./lib/bit_iterator');\n\nmodule.exports = unbzip2Stream;\n\nfunction unbzip2Stream() {\n    var bufferQueue = [];\n    var hasBytes = 0;\n    var blockSize = 0;\n    var broken = false;\n    var done = false;\n    var bitReader = null;\n    var streamCRC = null;\n\n    function decompressBlock(push){\n        if(!blockSize){\n            blockSize = bz2.header(bitReader);\n            //console.error(\"got header of\", blockSize);\n            streamCRC = 0;\n            return true;\n        }else{\n            var bufsize = 100000 * blockSize;\n            var buf = new Int32Array(bufsize);\n            \n            var chunk = [];\n            var f = function(b) {\n                chunk.push(b);\n            };\n\n            streamCRC = bz2.decompress(bitReader, f, buf, bufsize, streamCRC);\n            if (streamCRC === null) {\n                // reset for next bzip2 header\n                blockSize = 0;\n                return false;\n            }else{\n                //console.error('decompressed', chunk.length,'bytes');\n                push(Buffer.from(chunk));\n                return true;\n            }\n        }\n    }\n\n    var outlength = 0;\n    function decompressAndQueue(stream) {\n        if (broken) return;\n        try {\n            return decompressBlock(function(d) {\n                stream.queue(d);\n                if (d !== null) {\n                    //console.error('write at', outlength.toString(16));\n                    outlength += d.length;\n                } else {\n                    //console.error('written EOS');\n                }\n            });\n        } catch(e) {\n            //console.error(e);\n            stream.emit('error', e);\n            broken = true;\n            return false;\n        }\n    }\n\n    return through(\n        function write(data) {\n            //console.error('received', data.length,'bytes in', typeof data);\n            bufferQueue.push(data);\n            hasBytes += data.length;\n            if (bitReader === null) {\n                bitReader = bitIterator(function() {\n                    return bufferQueue.shift();\n                });\n            }\n            while (!broken && hasBytes - bitReader.bytesRead + 1 >= ((25000 + 100000 * blockSize) || 4)){\n                //console.error('decompressing with', hasBytes - bitReader.bytesRead + 1, 'bytes in buffer');\n                decompressAndQueue(this);\n            }\n        },\n        function end(x) {\n            //console.error(x,'last compressing with', hasBytes, 'bytes in buffer');\n            while (!broken && bitReader && hasBytes > bitReader.bytesRead){\n                decompressAndQueue(this);\n            }\n            if (!broken) {\n                if (streamCRC !== null)\n                    this.emit('error', new Error(\"input stream ended prematurely\"));\n                this.queue(null);\n            }\n        }\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}