{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Touchscreen = exports.Mouse = exports.Keyboard = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst USKeyboardLayout_js_1 = require(\"./USKeyboardLayout.js\");\n/**\n * Keyboard provides an api for managing a virtual keyboard.\n * The high level api is {@link Keyboard.\"type\"},\n * which takes raw characters and generates proper keydown, keypress/input,\n * and keyup events on your page.\n *\n * @remarks\n * For finer control, you can use {@link Keyboard.down},\n * {@link Keyboard.up}, and {@link Keyboard.sendCharacter}\n * to manually fire events as if they were generated from a real keyboard.\n *\n * On MacOS, keyboard shortcuts like `⌘ A` -\\> Select All do not work.\n * See {@link https://github.com/puppeteer/puppeteer/issues/1313 | #1313}.\n *\n * @example\n * An example of holding down `Shift` in order to select and delete some text:\n * ```js\n * await page.keyboard.type('Hello World!');\n * await page.keyboard.press('ArrowLeft');\n *\n * await page.keyboard.down('Shift');\n * for (let i = 0; i < ' World'.length; i++)\n *   await page.keyboard.press('ArrowLeft');\n * await page.keyboard.up('Shift');\n *\n * await page.keyboard.press('Backspace');\n * // Result text will end up saying 'Hello!'\n * ```\n *\n * @example\n * An example of pressing `A`\n * ```js\n * await page.keyboard.down('Shift');\n * await page.keyboard.press('KeyA');\n * await page.keyboard.up('Shift');\n * ```\n *\n * @public\n */\n\n\nclass Keyboard {\n  /** @internal */\n  constructor(client) {\n    /** @internal */\n    this._modifiers = 0;\n    this._pressedKeys = new Set();\n    this._client = client;\n  }\n  /**\n   * Dispatches a `keydown` event.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   * If `key` is a modifier key, `Shift`, `Meta`, `Control`, or `Alt`,\n   * subsequent key presses will be sent with that modifier active.\n   * To release the modifier key, use {@link Keyboard.up}.\n   *\n   * After the key is pressed once, subsequent calls to\n   * {@link Keyboard.down} will have\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat | repeat}\n   * set to true. To release the key, use {@link Keyboard.up}.\n   *\n   * Modifier keys DO influence {@link Keyboard.down}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text.\n   */\n\n\n  async down(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      text: undefined\n    };\n\n    const description = this._keyDescriptionForString(key);\n\n    const autoRepeat = this._pressedKeys.has(description.code);\n\n    this._pressedKeys.add(description.code);\n\n    this._modifiers |= this._modifierBit(description.key);\n    const text = options.text === undefined ? description.text : options.text;\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3\n    });\n  }\n\n  _modifierBit(key) {\n    if (key === 'Alt') return 1;\n    if (key === 'Control') return 2;\n    if (key === 'Meta') return 4;\n    if (key === 'Shift') return 8;\n    return 0;\n  }\n\n  _keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n      key: '',\n      keyCode: 0,\n      code: '',\n      text: '',\n      location: 0\n    };\n    const definition = USKeyboardLayout_js_1.keyDefinitions[keyString];\n    (0, assert_js_1.assert)(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) description.key = definition.key;\n    if (shift && definition.shiftKey) description.key = definition.shiftKey;\n    if (definition.keyCode) description.keyCode = definition.keyCode;\n    if (shift && definition.shiftKeyCode) description.keyCode = definition.shiftKeyCode;\n    if (definition.code) description.code = definition.code;\n    if (definition.location) description.location = definition.location;\n    if (description.key.length === 1) description.text = description.key;\n    if (definition.text) description.text = definition.text;\n    if (shift && definition.shiftText) description.text = definition.shiftText; // if any modifiers besides shift are pressed, no text should be sent\n\n    if (this._modifiers & ~8) description.text = '';\n    return description;\n  }\n  /**\n   * Dispatches a `keyup` event.\n   *\n   * @param key - Name of key to release, such as `ArrowLeft`.\n   * See {@link KeyInput | KeyInput}\n   * for a list of all key names.\n   */\n\n\n  async up(key) {\n    const description = this._keyDescriptionForString(key);\n\n    this._modifiers &= ~this._modifierBit(description.key);\n\n    this._pressedKeys.delete(description.code);\n\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n  /**\n   * Dispatches a `keypress` and `input` event.\n   * This does not send a `keydown` or `keyup` event.\n   *\n   * @remarks\n   * Modifier keys DO NOT effect {@link Keyboard.sendCharacter | Keyboard.sendCharacter}.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * page.keyboard.sendCharacter('嗨');\n   * ```\n   *\n   * @param char - Character to send into the page.\n   */\n\n\n  async sendCharacter(char) {\n    await this._client.send('Input.insertText', {\n      text: char\n    });\n  }\n\n  charIsKey(char) {\n    return !!USKeyboardLayout_js_1.keyDefinitions[char];\n  }\n  /**\n   * Sends a `keydown`, `keypress`/`input`,\n   * and `keyup` event for each character in the text.\n   *\n   * @remarks\n   * To press a special key, like `Control` or `ArrowDown`,\n   * use {@link Keyboard.press}.\n   *\n   * Modifier keys DO NOT effect `keyboard.type`.\n   * Holding down `Shift` will not type the text in upper case.\n   *\n   * @example\n   * ```js\n   * await page.keyboard.type('Hello'); // Types instantly\n   * await page.keyboard.type('World', {delay: 100}); // Types slower, like a user\n   * ```\n   *\n   * @param text - A text to type into a focused element.\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  async type(text) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const delay = options.delay || null;\n\n    for (const char of text) {\n      if (this.charIsKey(char)) {\n        await this.press(char, {\n          delay\n        });\n      } else {\n        if (delay) await new Promise(f => setTimeout(f, delay));\n        await this.sendCharacter(char);\n      }\n    }\n  }\n  /**\n   * Shortcut for {@link Keyboard.down}\n   * and {@link Keyboard.up}.\n   *\n   * @remarks\n   * If `key` is a single character and no modifier keys besides `Shift`\n   * are being held down, a `keypress`/`input` event will also generated.\n   * The `text` option can be specified to force an input event to be generated.\n   *\n   * Modifier keys DO effect {@link Keyboard.press}.\n   * Holding down `Shift` will type the text in upper case.\n   *\n   * @param key - Name of key to press, such as `ArrowLeft`.\n   * See {@link KeyInput} for a list of all key names.\n   *\n   * @param options - An object of options. Accepts text which, if specified,\n   * generates an input event with this text. Accepts delay which,\n   * if specified, is the time to wait between `keydown` and `keyup` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  async press(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      delay = null\n    } = options;\n    await this.down(key, options);\n    if (delay) await new Promise(f => setTimeout(f, options.delay));\n    await this.up(key);\n  }\n\n}\n\nexports.Keyboard = Keyboard;\n/**\n * The Mouse class operates in main-frame CSS pixels\n * relative to the top-left corner of the viewport.\n * @remarks\n * Every `page` object has its own Mouse, accessible with [`page.mouse`](#pagemouse).\n *\n * @example\n * ```js\n * // Using ‘page.mouse’ to trace a 100x100 square.\n * await page.mouse.move(0, 0);\n * await page.mouse.down();\n * await page.mouse.move(0, 100);\n * await page.mouse.move(100, 100);\n * await page.mouse.move(100, 0);\n * await page.mouse.move(0, 0);\n * await page.mouse.up();\n * ```\n *\n * **Note**: The mouse events trigger synthetic `MouseEvent`s.\n * This means that it does not fully replicate the functionality of what a normal user\n * would be able to do with their mouse.\n *\n * For example, dragging and selecting text is not possible using `page.mouse`.\n * Instead, you can use the {@link https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection | `DocumentOrShadowRoot.getSelection()`} functionality implemented in the platform.\n *\n * @example\n * For example, if you want to select all content between nodes:\n * ```js\n * await page.evaluate((from, to) => {\n *   const selection = from.getRootNode().getSelection();\n *   const range = document.createRange();\n *   range.setStartBefore(from);\n *   range.setEndAfter(to);\n *   selection.removeAllRanges();\n *   selection.addRange(range);\n * }, fromJSHandle, toJSHandle);\n * ```\n * If you then would want to copy-paste your selection, you can use the clipboard api:\n * ```js\n * // The clipboard api does not allow you to copy, unless the tab is focused.\n * await page.bringToFront();\n * await page.evaluate(() => {\n *   // Copy the selected content to the clipboard\n *   document.execCommand('copy');\n *   // Obtain the content of the clipboard as a string\n *   return navigator.clipboard.readText();\n * });\n * ```\n * **Note**: If you want access to the clipboard API,\n * you have to give it permission to do so:\n * ```js\n * await browser.defaultBrowserContext().overridePermissions(\n *   '<your origin>', ['clipboard-read', 'clipboard-write']\n * );\n * ```\n * @public\n */\n\nclass Mouse {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._x = 0;\n    this._y = 0;\n    this._button = 'none';\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `mousemove` event.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional object. If specified, the `steps` property\n   * sends intermediate `mousemove` events when set to `1` (default).\n   */\n\n\n  async move(x, y) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      steps = 1\n    } = options;\n    const fromX = this._x,\n          fromY = this._y;\n    this._x = x;\n    this._y = y;\n\n    for (let i = 1; i <= steps; i++) {\n      await this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button: this._button,\n        x: fromX + (this._x - fromX) * (i / steps),\n        y: fromY + (this._y - fromY) * (i / steps),\n        modifiers: this._keyboard._modifiers\n      });\n    }\n  }\n  /**\n   * Shortcut for `mouse.move`, `mouse.down` and `mouse.up`.\n   * @param x - Horizontal position of the mouse.\n   * @param y - Vertical position of the mouse.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async click(x, y) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      delay = null\n    } = options;\n\n    if (delay !== null) {\n      await this.move(x, y);\n      await this.down(options);\n      await new Promise(f => setTimeout(f, delay));\n      await this.up(options);\n    } else {\n      await this.move(x, y);\n      await this.down(options);\n      await this.up(options);\n    }\n  }\n  /**\n   * Dispatches a `mousedown` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async down() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = button;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mouseup` event.\n   * @param options - Optional `MouseOptions`.\n   */\n\n\n  async up() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = 'none';\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * Dispatches a `mousewheel` event.\n   * @param options - Optional: `MouseWheelOptions`.\n   *\n   * @example\n   * An example of zooming into an element:\n   * ```js\n   * await page.goto('https://mdn.mozillademos.org/en-US/docs/Web/API/Element/wheel_event$samples/Scaling_an_element_via_the_wheel?revision=1587366');\n   *\n   * const elem = await page.$('div');\n   * const boundingBox = await elem.boundingBox();\n   * await page.mouse.move(\n   *   boundingBox.x + boundingBox.width / 2,\n   *   boundingBox.y + boundingBox.height / 2\n   * );\n   *\n   * await page.mouse.wheel({ deltaY: -100 })\n   * ```\n   */\n\n\n  async wheel() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      deltaX = 0,\n      deltaY = 0\n    } = options;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseWheel',\n      x: this._x,\n      y: this._y,\n      deltaX,\n      deltaY,\n      modifiers: this._keyboard._modifiers,\n      pointerType: 'mouse'\n    });\n  }\n  /**\n   * Dispatches a `drag` event.\n   * @param start - starting point for drag\n   * @param target - point to drag to\n   */\n\n\n  async drag(start, target) {\n    const promise = new Promise(resolve => {\n      this._client.once('Input.dragIntercepted', event => resolve(event.data));\n    });\n    await this.move(start.x, start.y);\n    await this.down();\n    await this.move(target.x, target.y);\n    return promise;\n  }\n  /**\n   * Dispatches a `dragenter` event.\n   * @param target - point for emitting `dragenter` event\n   * @param data - drag data containing items and operations mask\n   */\n\n\n  async dragEnter(target, data) {\n    await this._client.send('Input.dispatchDragEvent', {\n      type: 'dragEnter',\n      x: target.x,\n      y: target.y,\n      modifiers: this._keyboard._modifiers,\n      data\n    });\n  }\n  /**\n   * Dispatches a `dragover` event.\n   * @param target - point for emitting `dragover` event\n   * @param data - drag data containing items and operations mask\n   */\n\n\n  async dragOver(target, data) {\n    await this._client.send('Input.dispatchDragEvent', {\n      type: 'dragOver',\n      x: target.x,\n      y: target.y,\n      modifiers: this._keyboard._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a dragenter, dragover, and drop in sequence.\n   * @param target - point to drop on\n   * @param data - drag data containing items and operations mask\n   */\n\n\n  async drop(target, data) {\n    await this._client.send('Input.dispatchDragEvent', {\n      type: 'drop',\n      x: target.x,\n      y: target.y,\n      modifiers: this._keyboard._modifiers,\n      data\n    });\n  }\n  /**\n   * Performs a drag, dragenter, dragover, and drop in sequence.\n   * @param target - point to drag from\n   * @param target - point to drop on\n   * @param options - An object of options. Accepts delay which,\n   * if specified, is the time to wait between `dragover` and `drop` in milliseconds.\n   * Defaults to 0.\n   */\n\n\n  async dragAndDrop(start, target) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      delay = null\n    } = options;\n    const data = await this.drag(start, target);\n    await this.dragEnter(target, data);\n    await this.dragOver(target, data);\n\n    if (delay) {\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n\n    await this.drop(target, data);\n    await this.up();\n  }\n\n}\n\nexports.Mouse = Mouse;\n/**\n * The Touchscreen class exposes touchscreen events.\n * @public\n */\n\nclass Touchscreen {\n  /**\n   * @internal\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * Dispatches a `touchstart` and `touchend` event.\n   * @param x - Horizontal position of the tap.\n   * @param y - Vertical position of the tap.\n   */\n\n\n  async tap(x, y) {\n    const touchPoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: this._keyboard._modifiers\n    });\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: this._keyboard._modifiers\n    });\n  }\n\n}\n\nexports.Touchscreen = Touchscreen;","map":{"version":3,"mappings":"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","names":["Keyboard","constructor","client","Set","_client","down","key","options","text","undefined","description","_keyDescriptionForString","autoRepeat","_pressedKeys","has","code","add","_modifiers","_modifierBit","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","keyString","shift","definition","USKeyboardLayout_js_1","shiftKey","shiftKeyCode","length","shiftText","up","delete","sendCharacter","char","charIsKey","delay","press","Promise","f","setTimeout","exports","Mouse","keyboard","_keyboard","move","x","y","steps","fromX","_x","fromY","_y","i","button","_button","click","clickCount","wheel","deltaX","deltaY","pointerType","drag","start","target","promise","resolve","once","event","data","dragEnter","dragOver","drop","dragAndDrop","Touchscreen","tap","touchPoints","Math","round"],"sources":["../../../../src/common/Input.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}