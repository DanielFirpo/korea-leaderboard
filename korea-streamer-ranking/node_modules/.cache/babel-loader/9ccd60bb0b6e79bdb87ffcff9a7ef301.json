{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptResolutionAction = exports.HTTPRequest = exports.DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The default cooperative request interception resolution priority\n *\n * @public\n */\n\n\nexports.DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n/**\n *\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`:  emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\n\nclass HTTPRequest {\n  /**\n   * @internal\n   */\n  constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n    /**\n     * @internal\n     */\n    this._failureText = null;\n    /**\n     * @internal\n     */\n\n    this._response = null;\n    /**\n     * @internal\n     */\n\n    this._fromMemoryCache = false;\n    this._interceptionHandled = false;\n    this._headers = {};\n    this._client = client;\n    this._requestId = event.requestId;\n    this._isNavigationRequest = event.requestId === event.loaderId && event.type === 'Document';\n    this._interceptionId = interceptionId;\n    this._allowInterception = allowInterception;\n    this._url = event.request.url;\n    this._resourceType = event.type.toLowerCase();\n    this._method = event.request.method;\n    this._postData = event.request.postData;\n    this._frame = frame;\n    this._redirectChain = redirectChain;\n    this._continueRequestOverrides = {};\n    this._interceptResolutionState = {\n      action: InterceptResolutionAction.None\n    };\n    this._interceptHandlers = [];\n    this._initiator = event.initiator;\n\n    for (const key of Object.keys(event.request.headers)) this._headers[key.toLowerCase()] = event.request.headers[key];\n  }\n  /**\n   * @returns the URL of the request\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * @returns the `ContinueRequestOverrides` that will be used\n   * if the interception is allowed to continue (ie, `abort()` and\n   * `respond()` aren't called).\n   */\n\n\n  continueRequestOverrides() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._continueRequestOverrides;\n  }\n  /**\n   * @returns The `ResponseForRequest` that gets used if the\n   * interception is allowed to respond (ie, `abort()` is not called).\n   */\n\n\n  responseForRequest() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._responseForRequest;\n  }\n  /**\n   * @returns the most recent reason for aborting the request\n   */\n\n\n  abortErrorReason() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._abortErrorReason;\n  }\n  /**\n   * @returns An InterceptResolutionState object describing the current resolution\n   *  action and priority.\n   *\n   *  InterceptResolutionState contains:\n   *    action: InterceptResolutionAction\n   *    priority?: number\n   *\n   *  InterceptResolutionAction is one of: `abort`, `respond`, `continue`,\n   *  `disabled`, `none`, or `already-handled`.\n   */\n\n\n  interceptResolutionState() {\n    if (!this._allowInterception) return {\n      action: InterceptResolutionAction.Disabled\n    };\n    if (this._interceptionHandled) return {\n      action: InterceptResolutionAction.AlreadyHandled\n    };\n    return { ...this._interceptResolutionState\n    };\n  }\n  /**\n   * @returns `true` if the intercept resolution has already been handled,\n   * `false` otherwise.\n   */\n\n\n  isInterceptResolutionHandled() {\n    return this._interceptionHandled;\n  }\n  /**\n   * Adds an async request handler to the processing queue.\n   * Deferred handlers are not guaranteed to execute in any particular order,\n   * but they are guaranteed to resolve before the request interception\n   * is finalized.\n   */\n\n\n  enqueueInterceptAction(pendingHandler) {\n    this._interceptHandlers.push(pendingHandler);\n  }\n  /**\n   * Awaits pending interception handlers and then decides how to fulfill\n   * the request interception.\n   */\n\n\n  async finalizeInterceptions() {\n    await this._interceptHandlers.reduce((promiseChain, interceptAction) => promiseChain.then(interceptAction), Promise.resolve());\n    const {\n      action\n    } = this.interceptResolutionState();\n\n    switch (action) {\n      case 'abort':\n        return this._abort(this._abortErrorReason);\n\n      case 'respond':\n        return this._respond(this._responseForRequest);\n\n      case 'continue':\n        return this._continue(this._continueRequestOverrides);\n    }\n  }\n  /**\n   * Contains the request's resource type as it was perceived by the rendering\n   * engine.\n   */\n\n\n  resourceType() {\n    return this._resourceType;\n  }\n  /**\n   * @returns the method used (`GET`, `POST`, etc.)\n   */\n\n\n  method() {\n    return this._method;\n  }\n  /**\n   * @returns the request's post body, if any.\n   */\n\n\n  postData() {\n    return this._postData;\n  }\n  /**\n   * @returns an object with HTTP headers associated with the request. All\n   * header names are lower-case.\n   */\n\n\n  headers() {\n    return this._headers;\n  }\n  /**\n   * @returns A matching `HTTPResponse` object, or null if the response has not\n   * been received yet.\n   */\n\n\n  response() {\n    return this._response;\n  }\n  /**\n   * @returns the frame that initiated the request, or null if navigating to\n   * error pages.\n   */\n\n\n  frame() {\n    return this._frame;\n  }\n  /**\n   * @returns true if the request is the driver of the current frame's navigation.\n   */\n\n\n  isNavigationRequest() {\n    return this._isNavigationRequest;\n  }\n  /**\n   * @returns the initiator of the request.\n   */\n\n\n  initiator() {\n    return this._initiator;\n  }\n  /**\n   * A `redirectChain` is a chain of requests initiated to fetch a resource.\n   * @remarks\n   *\n   * `redirectChain` is shared between all the requests of the same chain.\n   *\n   * For example, if the website `http://example.com` has a single redirect to\n   * `https://example.com`, then the chain will contain one request:\n   *\n   * ```js\n   * const response = await page.goto('http://example.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 1\n   * console.log(chain[0].url()); // 'http://example.com'\n   * ```\n   *\n   * If the website `https://google.com` has no redirects, then the chain will be empty:\n   *\n   * ```js\n   * const response = await page.goto('https://google.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 0\n   * ```\n   *\n   * @returns the chain of requests - if a server responds with at least a\n   * single redirect, this chain will contain all requests that were redirected.\n   */\n\n\n  redirectChain() {\n    return this._redirectChain.slice();\n  }\n  /**\n   * Access information about the request's failure.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * Example of logging all failed requests:\n   *\n   * ```js\n   * page.on('requestfailed', request => {\n   *   console.log(request.url() + ' ' + request.failure().errorText);\n   * });\n   * ```\n   *\n   * @returns `null` unless the request failed. If the request fails this can\n   * return an object with `errorText` containing a human-readable error\n   * message, e.g. `net::ERR_FAILED`. It is not guaranteed that there will be\n   * failure text if the request fails.\n   */\n\n\n  failure() {\n    if (!this._failureText) return null;\n    return {\n      errorText: this._failureText\n    };\n  }\n  /**\n   * Continues request with optional request overrides.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   // Override headers\n   *   const headers = Object.assign({}, request.headers(), {\n   *     foo: 'bar', // set \"foo\" header\n   *     origin: undefined, // remove \"origin\" header\n   *   });\n   *   request.continue({headers});\n   * });\n   * ```\n   *\n   * @param overrides - optional overrides to apply to the request.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async continue() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._continue(overrides);\n    }\n\n    this._continueRequestOverrides = overrides;\n\n    if (priority > this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Continue,\n        priority\n      };\n      return;\n    }\n\n    if (priority === this._interceptResolutionState.priority) {\n      if (this._interceptResolutionState.action === 'abort' || this._interceptResolutionState.action === 'respond') {\n        return;\n      }\n\n      this._interceptResolutionState.action = InterceptResolutionAction.Continue;\n    }\n\n    return;\n  }\n\n  async _continue() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      url,\n      method,\n      postData,\n      headers\n    } = overrides;\n    this._interceptionHandled = true;\n    const postDataBinaryBase64 = postData ? Buffer.from(postData).toString('base64') : undefined;\n    await this._client.send('Fetch.continueRequest', {\n      requestId: this._interceptionId,\n      url,\n      method,\n      postData: postDataBinaryBase64,\n      headers: headers ? headersArray(headers) : undefined\n    }).catch(error => {\n      this._interceptionHandled = false;\n      return handleError(error);\n    });\n  }\n  /**\n   * Fulfills a request with the given response.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * An example of fulfilling all requests with 404 responses:\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   request.respond({\n   *     status: 404,\n   *     contentType: 'text/plain',\n   *     body: 'Not Found!'\n   *   });\n   * });\n   * ```\n   *\n   * NOTE: Mocking responses for dataURL requests is not supported.\n   * Calling `request.respond` for a dataURL request is a noop.\n   *\n   * @param response - the response to fulfill the request with.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async respond(response, priority) {\n    // Mocking responses for dataURL requests is not currently supported.\n    if (this._url.startsWith('data:')) return;\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._respond(response);\n    }\n\n    this._responseForRequest = response;\n\n    if (priority > this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Respond,\n        priority\n      };\n      return;\n    }\n\n    if (priority === this._interceptResolutionState.priority) {\n      if (this._interceptResolutionState.action === 'abort') {\n        return;\n      }\n\n      this._interceptResolutionState.action = InterceptResolutionAction.Respond;\n    }\n  }\n\n  async _respond(response) {\n    this._interceptionHandled = true;\n    const responseBody = response.body && helper_js_1.helper.isString(response.body) ? Buffer.from(response.body) : response.body || null;\n    const responseHeaders = {};\n\n    if (response.headers) {\n      for (const header of Object.keys(response.headers)) {\n        const value = response.headers[header];\n        responseHeaders[header.toLowerCase()] = Array.isArray(value) ? value.map(item => String(item)) : String(value);\n      }\n    }\n\n    if (response.contentType) responseHeaders['content-type'] = response.contentType;\n    if (responseBody && !('content-length' in responseHeaders)) responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    await this._client.send('Fetch.fulfillRequest', {\n      requestId: this._interceptionId,\n      responseCode: response.status || 200,\n      responsePhrase: STATUS_TEXTS[response.status || 200],\n      responseHeaders: headersArray(responseHeaders),\n      body: responseBody ? responseBody.toString('base64') : undefined\n    }).catch(error => {\n      this._interceptionHandled = false;\n      return handleError(error);\n    });\n  }\n  /**\n   * Aborts a request.\n   *\n   * @remarks\n   * To use this, request interception should be enabled with\n   * {@link Page.setRequestInterception}. If it is not enabled, this method will\n   * throw an exception immediately.\n   *\n   * @param errorCode - optional error code to provide.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async abort() {\n    let errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'failed';\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    const errorReason = errorReasons[errorCode];\n    (0, assert_js_1.assert)(errorReason, 'Unknown error code: ' + errorCode);\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._abort(errorReason);\n    }\n\n    this._abortErrorReason = errorReason;\n\n    if (priority >= this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Abort,\n        priority\n      };\n      return;\n    }\n  }\n\n  async _abort(errorReason) {\n    this._interceptionHandled = true;\n    await this._client.send('Fetch.failRequest', {\n      requestId: this._interceptionId,\n      errorReason\n    }).catch(handleError);\n  }\n\n}\n\nexports.HTTPRequest = HTTPRequest;\n/**\n * @public\n */\n\nvar InterceptResolutionAction;\n\n(function (InterceptResolutionAction) {\n  InterceptResolutionAction[\"Abort\"] = \"abort\";\n  InterceptResolutionAction[\"Respond\"] = \"respond\";\n  InterceptResolutionAction[\"Continue\"] = \"continue\";\n  InterceptResolutionAction[\"Disabled\"] = \"disabled\";\n  InterceptResolutionAction[\"None\"] = \"none\";\n  InterceptResolutionAction[\"AlreadyHandled\"] = \"already-handled\";\n})(InterceptResolutionAction = exports.InterceptResolutionAction || (exports.InterceptResolutionAction = {}));\n\nconst errorReasons = {\n  aborted: 'Aborted',\n  accessdenied: 'AccessDenied',\n  addressunreachable: 'AddressUnreachable',\n  blockedbyclient: 'BlockedByClient',\n  blockedbyresponse: 'BlockedByResponse',\n  connectionaborted: 'ConnectionAborted',\n  connectionclosed: 'ConnectionClosed',\n  connectionfailed: 'ConnectionFailed',\n  connectionrefused: 'ConnectionRefused',\n  connectionreset: 'ConnectionReset',\n  internetdisconnected: 'InternetDisconnected',\n  namenotresolved: 'NameNotResolved',\n  timedout: 'TimedOut',\n  failed: 'Failed'\n};\n\nfunction headersArray(headers) {\n  const result = [];\n\n  for (const name in headers) {\n    const value = headers[name];\n\n    if (!Object.is(value, undefined)) {\n      const values = Array.isArray(value) ? value : [value];\n      result.push(...values.map(value => ({\n        name,\n        value: value + ''\n      })));\n    }\n  }\n\n  return result;\n}\n\nasync function handleError(error) {\n  if (['Invalid header'].includes(error.originalMessage)) {\n    throw error;\n  } // In certain cases, protocol will return error if the request was\n  // already canceled or the page was closed. We should tolerate these\n  // errors.\n\n\n  (0, helper_js_1.debugError)(error);\n} // List taken from\n// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n// with extra 306 and 418 codes.\n\n\nconst STATUS_TEXTS = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};","map":{"version":3,"mappings":"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","names":["exports","HTTPRequest","constructor","client","frame","interceptionId","allowInterception","event","redirectChain","_client","_requestId","requestId","_isNavigationRequest","loaderId","type","_interceptionId","_allowInterception","_url","request","url","_resourceType","toLowerCase","_method","method","_postData","postData","_frame","_redirectChain","_continueRequestOverrides","_interceptResolutionState","action","InterceptResolutionAction","None","_interceptHandlers","_initiator","initiator","key","Object","keys","headers","_headers","continueRequestOverrides","responseForRequest","_responseForRequest","abortErrorReason","_abortErrorReason","interceptResolutionState","Disabled","_interceptionHandled","AlreadyHandled","isInterceptResolutionHandled","enqueueInterceptAction","pendingHandler","push","finalizeInterceptions","reduce","promiseChain","interceptAction","then","Promise","resolve","_abort","_respond","_continue","resourceType","response","_response","isNavigationRequest","slice","failure","_failureText","errorText","continue","overrides","priority","startsWith","undefined","Continue","postDataBinaryBase64","Buffer","from","toString","send","headersArray","catch","error","handleError","respond","Respond","responseBody","body","helper_js_1","isString","responseHeaders","header","value","Array","isArray","map","item","String","contentType","byteLength","responseCode","status","responsePhrase","STATUS_TEXTS","abort","errorCode","errorReason","errorReasons","Abort","aborted","accessdenied","addressunreachable","blockedbyclient","blockedbyresponse","connectionaborted","connectionclosed","connectionfailed","connectionrefused","connectionreset","internetdisconnected","namenotresolved","timedout","failed","result","name","is","values","includes","originalMessage"],"sources":["../../../../src/common/HTTPRequest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}