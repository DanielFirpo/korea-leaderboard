{"ast":null,"code":"var path = require('path');\n\nvar fs = require('fs');\n\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP(p, opts, f, made) {\n  if (typeof opts === 'function') {\n    f = opts;\n    opts = {};\n  } else if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  var mode = opts.mode;\n  var xfs = opts.fs || fs;\n\n  if (mode === undefined) {\n    mode = _0777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n\n  var cb = f || function () {};\n\n  p = path.resolve(p);\n  xfs.mkdir(p, mode, function (er) {\n    if (!er) {\n      made = made || p;\n      return cb(null, made);\n    }\n\n    switch (er.code) {\n      case 'ENOENT':\n        mkdirP(path.dirname(p), opts, function (er, made) {\n          if (er) cb(er, made);else mkdirP(p, opts, cb, made);\n        });\n        break;\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n\n      default:\n        xfs.stat(p, function (er2, stat) {\n          // if the stat fails, then that's super weird.\n          // let the original error be the failure reason.\n          if (er2 || !stat.isDirectory()) cb(er, made);else cb(null, made);\n        });\n        break;\n    }\n  });\n}\n\nmkdirP.sync = function sync(p, opts, made) {\n  if (!opts || typeof opts !== 'object') {\n    opts = {\n      mode: opts\n    };\n  }\n\n  var mode = opts.mode;\n  var xfs = opts.fs || fs;\n\n  if (mode === undefined) {\n    mode = _0777 & ~process.umask();\n  }\n\n  if (!made) made = null;\n  p = path.resolve(p);\n\n  try {\n    xfs.mkdirSync(p, mode);\n    made = made || p;\n  } catch (err0) {\n    switch (err0.code) {\n      case 'ENOENT':\n        made = sync(path.dirname(p), opts, made);\n        sync(p, opts, made);\n        break;\n      // In the case of any other error, just see if there's a dir\n      // there already.  If so, then hooray!  If not, then something\n      // is borked.\n\n      default:\n        var stat;\n\n        try {\n          stat = xfs.statSync(p);\n        } catch (err1) {\n          throw err0;\n        }\n\n        if (!stat.isDirectory()) throw err0;\n        break;\n    }\n  }\n\n  return made;\n};","map":{"version":3,"names":["path","require","fs","_0777","parseInt","module","exports","mkdirP","mkdirp","p","opts","f","made","mode","xfs","undefined","process","umask","cb","resolve","mkdir","er","code","dirname","stat","er2","isDirectory","sync","mkdirSync","err0","statSync","err1"],"sources":["C:/Users/DF/Documents/GitHub/KoreaStreamerRanking/korea-streamer-ranking/node_modules/mkdirp-classic/index.js"],"sourcesContent":["var path = require('path');\nvar fs = require('fs');\nvar _0777 = parseInt('0777', 8);\n\nmodule.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;\n\nfunction mkdirP (p, opts, f, made) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n    \n    var cb = f || function () {};\n    p = path.resolve(p);\n    \n    xfs.mkdir(p, mode, function (er) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function (er, made) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function (er2, stat) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync (p, opts, made) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n    \n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n    \n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT' :\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}