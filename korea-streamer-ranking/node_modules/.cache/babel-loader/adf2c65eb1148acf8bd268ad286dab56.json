{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkManager = exports.NetworkManagerEmittedEvents = void 0;\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst HTTPRequest_js_1 = require(\"./HTTPRequest.js\");\n\nconst HTTPResponse_js_1 = require(\"./HTTPResponse.js\");\n\nconst NetworkEventManager_js_1 = require(\"./NetworkEventManager.js\");\n/**\n * We use symbols to prevent any external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\n\n\nexports.NetworkManagerEmittedEvents = {\n  Request: Symbol('NetworkManager.Request'),\n  RequestServedFromCache: Symbol('NetworkManager.RequestServedFromCache'),\n  Response: Symbol('NetworkManager.Response'),\n  RequestFailed: Symbol('NetworkManager.RequestFailed'),\n  RequestFinished: Symbol('NetworkManager.RequestFinished')\n};\n/**\n * @internal\n */\n\nclass NetworkManager extends EventEmitter_js_1.EventEmitter {\n  constructor(client, ignoreHTTPSErrors, frameManager) {\n    super();\n    this._networkEventManager = new NetworkEventManager_js_1.NetworkEventManager();\n    this._extraHTTPHeaders = {};\n    this._credentials = null;\n    this._attemptedAuthentications = new Set();\n    this._userRequestInterceptionEnabled = false;\n    this._protocolRequestInterceptionEnabled = false;\n    this._userCacheDisabled = false;\n    this._emulatedNetworkConditions = {\n      offline: false,\n      upload: -1,\n      download: -1,\n      latency: 0\n    };\n    this._client = client;\n    this._ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this._frameManager = frameManager;\n\n    this._client.on('Fetch.requestPaused', this._onRequestPaused.bind(this));\n\n    this._client.on('Fetch.authRequired', this._onAuthRequired.bind(this));\n\n    this._client.on('Network.requestWillBeSent', this._onRequestWillBeSent.bind(this));\n\n    this._client.on('Network.requestServedFromCache', this._onRequestServedFromCache.bind(this));\n\n    this._client.on('Network.responseReceived', this._onResponseReceived.bind(this));\n\n    this._client.on('Network.loadingFinished', this._onLoadingFinished.bind(this));\n\n    this._client.on('Network.loadingFailed', this._onLoadingFailed.bind(this));\n\n    this._client.on('Network.responseReceivedExtraInfo', this._onResponseReceivedExtraInfo.bind(this));\n  }\n\n  async initialize() {\n    await this._client.send('Network.enable');\n    if (this._ignoreHTTPSErrors) await this._client.send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    });\n  }\n\n  async authenticate(credentials) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    this._extraHTTPHeaders = {};\n\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      (0, assert_js_1.assert)(helper_js_1.helper.isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      this._extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n\n    await this._client.send('Network.setExtraHTTPHeaders', {\n      headers: this._extraHTTPHeaders\n    });\n  }\n\n  extraHTTPHeaders() {\n    return Object.assign({}, this._extraHTTPHeaders);\n  }\n\n  numRequestsInProgress() {\n    return this._networkEventManager.numRequestsInProgress();\n  }\n\n  async setOfflineMode(value) {\n    this._emulatedNetworkConditions.offline = value;\n    await this._updateNetworkConditions();\n  }\n\n  async emulateNetworkConditions(networkConditions) {\n    this._emulatedNetworkConditions.upload = networkConditions ? networkConditions.upload : -1;\n    this._emulatedNetworkConditions.download = networkConditions ? networkConditions.download : -1;\n    this._emulatedNetworkConditions.latency = networkConditions ? networkConditions.latency : 0;\n    await this._updateNetworkConditions();\n  }\n\n  async _updateNetworkConditions() {\n    await this._client.send('Network.emulateNetworkConditions', {\n      offline: this._emulatedNetworkConditions.offline,\n      latency: this._emulatedNetworkConditions.latency,\n      uploadThroughput: this._emulatedNetworkConditions.upload,\n      downloadThroughput: this._emulatedNetworkConditions.download\n    });\n  }\n\n  async setUserAgent(userAgent, userAgentMetadata) {\n    await this._client.send('Network.setUserAgentOverride', {\n      userAgent: userAgent,\n      userAgentMetadata: userAgentMetadata\n    });\n  }\n\n  async setCacheEnabled(enabled) {\n    this._userCacheDisabled = !enabled;\n    await this._updateProtocolCacheDisabled();\n  }\n\n  async setRequestInterception(value) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception() {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled) return;\n    this._protocolRequestInterceptionEnabled = enabled;\n\n    if (enabled) {\n      await Promise.all([this._updateProtocolCacheDisabled(), this._client.send('Fetch.enable', {\n        handleAuthRequests: true,\n        patterns: [{\n          urlPattern: '*'\n        }]\n      })]);\n    } else {\n      await Promise.all([this._updateProtocolCacheDisabled(), this._client.send('Fetch.disable')]);\n    }\n  }\n\n  _cacheDisabled() {\n    return this._userCacheDisabled;\n  }\n\n  async _updateProtocolCacheDisabled() {\n    await this._client.send('Network.setCacheDisabled', {\n      cacheDisabled: this._cacheDisabled()\n    });\n  }\n\n  _onRequestWillBeSent(event) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this._userRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const {\n        requestId: networkRequestId\n      } = event;\n\n      this._networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n\n\n      const requestPausedEvent = this._networkEventManager.getRequestPaused(networkRequestId);\n\n      if (requestPausedEvent) {\n        const {\n          requestId: fetchRequestId\n        } = requestPausedEvent;\n\n        this._patchRequestEventHeaders(event, requestPausedEvent);\n\n        this._onRequest(event, fetchRequestId);\n\n        this._networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n\n      return;\n    }\n\n    this._onRequest(event, null);\n  }\n\n  _onAuthRequired(event) {\n    let response = 'Default';\n\n    if (this._attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this._credentials) {\n      response = 'ProvideCredentials';\n\n      this._attemptedAuthentications.add(event.requestId);\n    }\n\n    const {\n      username,\n      password\n    } = this._credentials || {\n      username: undefined,\n      password: undefined\n    };\n\n    this._client.send('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: {\n        response,\n        username,\n        password\n      }\n    }).catch(helper_js_1.debugError);\n  }\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   *\n   *\n   */\n\n\n  _onRequestPaused(event) {\n    if (!this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {\n      this._client.send('Fetch.continueRequest', {\n        requestId: event.requestId\n      }).catch(helper_js_1.debugError);\n    }\n\n    const {\n      networkId: networkRequestId,\n      requestId: fetchRequestId\n    } = event;\n\n    if (!networkRequestId) {\n      return;\n    }\n\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent = this._networkEventManager.getRequestWillBeSent(networkRequestId); // redirect requests have the same `requestId`,\n\n\n      if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n        this._networkEventManager.forgetRequestWillBeSent(networkRequestId);\n\n        return;\n      }\n\n      return requestWillBeSentEvent;\n    })();\n\n    if (requestWillBeSentEvent) {\n      this._patchRequestEventHeaders(requestWillBeSentEvent, event);\n\n      this._onRequest(requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this._networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n\n  _patchRequestEventHeaders(requestWillBeSentEvent, requestPausedEvent) {\n    requestWillBeSentEvent.request.headers = { ...requestWillBeSentEvent.request.headers,\n      // includes extra headers, like: Accept, Origin\n      ...requestPausedEvent.request.headers\n    };\n  }\n\n  _onRequest(event, fetchRequestId) {\n    let redirectChain = [];\n\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this._networkEventManager.responseExtraInfo(event.requestId).shift();\n\n        if (!redirectResponseExtraInfo) {\n          this._networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId\n          });\n\n          return;\n        }\n      }\n\n      const request = this._networkEventManager.getRequest(event.requestId); // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n\n\n      if (request) {\n        this._handleRequestRedirect(request, event.redirectResponse, redirectResponseExtraInfo);\n\n        redirectChain = request._redirectChain;\n      }\n    }\n\n    const frame = event.frameId ? this._frameManager.frame(event.frameId) : null;\n    const request = new HTTPRequest_js_1.HTTPRequest(this._client, frame, fetchRequestId, this._userRequestInterceptionEnabled, event, redirectChain);\n\n    this._networkEventManager.storeRequest(event.requestId, request);\n\n    this.emit(exports.NetworkManagerEmittedEvents.Request, request);\n    request.finalizeInterceptions();\n  }\n\n  _onRequestServedFromCache(event) {\n    const request = this._networkEventManager.getRequest(event.requestId);\n\n    if (request) request._fromMemoryCache = true;\n    this.emit(exports.NetworkManagerEmittedEvents.RequestServedFromCache, request);\n  }\n\n  _handleRequestRedirect(request, responsePayload, extraInfo) {\n    const response = new HTTPResponse_js_1.HTTPResponse(this._client, request, responsePayload, extraInfo);\n    request._response = response;\n\n    request._redirectChain.push(request);\n\n    response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n\n    this._forgetRequest(request, false);\n\n    this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n  }\n\n  _emitResponseEvent(responseReceived, extraInfo) {\n    const request = this._networkEventManager.getRequest(responseReceived.requestId); // FileUpload sends a response without a matching request.\n\n\n    if (!request) return;\n\n    const extraInfos = this._networkEventManager.responseExtraInfo(responseReceived.requestId);\n\n    if (extraInfos.length) {\n      (0, helper_js_1.debugError)(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n    }\n\n    const response = new HTTPResponse_js_1.HTTPResponse(this._client, request, responseReceived.response, extraInfo);\n    request._response = response;\n    this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n  }\n\n  _onResponseReceived(event) {\n    const request = this._networkEventManager.getRequest(event.requestId);\n\n    let extraInfo = null;\n\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this._networkEventManager.responseExtraInfo(event.requestId).shift();\n\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this._networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event\n        });\n\n        return;\n      }\n    }\n\n    this._emitResponseEvent(event, extraInfo);\n  }\n\n  _onResponseReceivedExtraInfo(event) {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this._networkEventManager.takeQueuedRedirectInfo(event.requestId);\n\n    if (redirectInfo) {\n      this._networkEventManager.responseExtraInfo(event.requestId).push(event);\n\n      this._onRequest(redirectInfo.event, redirectInfo.fetchRequestId);\n\n      return;\n    } // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n\n\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      this._networkEventManager.forgetQueuedEventGroup(event.requestId);\n\n      this._emitResponseEvent(queuedEvents.responseReceivedEvent, event);\n\n      if (queuedEvents.loadingFinishedEvent) {\n        this._emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n\n      if (queuedEvents.loadingFailedEvent) {\n        this._emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n\n      return;\n    } // Wait until we get another event that can use this ExtraInfo event.\n\n\n    this._networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n\n  _forgetRequest(request, events) {\n    const requestId = request._requestId;\n    const interceptionId = request._interceptionId;\n\n    this._networkEventManager.forgetRequest(requestId);\n\n    this._attemptedAuthentications.delete(interceptionId);\n\n    if (events) {\n      this._networkEventManager.forget(requestId);\n    }\n  }\n\n  _onLoadingFinished(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this._emitLoadingFinished(event);\n    }\n  }\n\n  _emitLoadingFinished(event) {\n    const request = this._networkEventManager.getRequest(event.requestId); // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n\n\n    if (!request) return; // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n\n    if (request.response()) request.response()._resolveBody(null);\n\n    this._forgetRequest(request, true);\n\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n  }\n\n  _onLoadingFailed(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this._emitLoadingFailed(event);\n    }\n  }\n\n  _emitLoadingFailed(event) {\n    const request = this._networkEventManager.getRequest(event.requestId); // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n\n\n    if (!request) return;\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) response._resolveBody(null);\n\n    this._forgetRequest(request, true);\n\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFailed, request);\n  }\n\n}\n\nexports.NetworkManager = NetworkManager;","map":{"version":3,"mappings":"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","names":["exports","Request","Symbol","RequestServedFromCache","Response","RequestFailed","RequestFinished","NetworkManager","EventEmitter_js_1","constructor","client","ignoreHTTPSErrors","frameManager","NetworkEventManager_js_1","Set","offline","upload","download","latency","_client","_ignoreHTTPSErrors","_frameManager","on","_onRequestPaused","bind","_onAuthRequired","_onRequestWillBeSent","_onRequestServedFromCache","_onResponseReceived","_onLoadingFinished","_onLoadingFailed","_onResponseReceivedExtraInfo","initialize","send","ignore","authenticate","credentials","_credentials","_updateProtocolRequestInterception","setExtraHTTPHeaders","extraHTTPHeaders","_extraHTTPHeaders","key","Object","keys","value","helper_js_1","isString","toLowerCase","headers","assign","numRequestsInProgress","_networkEventManager","setOfflineMode","_emulatedNetworkConditions","_updateNetworkConditions","emulateNetworkConditions","networkConditions","uploadThroughput","downloadThroughput","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","enabled","_userCacheDisabled","_updateProtocolCacheDisabled","setRequestInterception","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","Promise","all","handleAuthRequests","patterns","urlPattern","_cacheDisabled","cacheDisabled","event","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_patchRequestEventHeaders","_onRequest","forgetRequestPaused","response","_attemptedAuthentications","has","add","username","password","undefined","authChallengeResponse","catch","networkId","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_handleRequestRedirect","_redirectChain","frame","frameId","HTTPRequest_js_1","storeRequest","emit","finalizeInterceptions","_fromMemoryCache","responsePayload","extraInfo","HTTPResponse_js_1","_response","push","_resolveBody","Error","_forgetRequest","_emitResponseEvent","responseReceived","extraInfos","length","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","forgetQueuedEventGroup","loadingFinishedEvent","_emitLoadingFinished","loadingFailedEvent","_emitLoadingFailed","events","_requestId","interceptionId","_interceptionId","forgetRequest","delete","forget","_failureText","errorText"],"sources":["../../../../src/common/NetworkManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}